#!/usr/bin/env node

const app = require('../app')([])
const debug = require('debug')('untitled:server')
const http = require('http')
// const socket = require('../middlewares/socket/index')

function startServer() {
  try {
    const port = normalizePort(process.env.PORT || '4000')
    app.set('port', port)

    const server = http.createServer(app)

    // socket(server)

    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)

    function onListening() {
      const addr = server.address()
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
      debug('Listening on ' + bind)
    }
  }
  catch (err) {
    // console.log(err)
    process.exit(1)
  }
}

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }
  return false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

startServer()
